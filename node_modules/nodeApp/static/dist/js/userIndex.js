/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./tmp";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*
	* 雇主端首页
	*/

	'use strict';

	__webpack_require__(1);
	var tpl = __webpack_require__(2);

	/*
	* 基础依赖
	*/
	__webpack_require__(5);

	/*
	* 组件
	*/
	//require('../../../../../../WebFrontShared/Static/assets/component/page/guide/guide');
	__webpack_require__(7);

	var vm = new Vue({
	    el: '#wrap',
	    template: tpl(),
	    data: {},
	    methods: {
	        init: function init() {}
	    },
	    ready: function ready() {
	        this.init();
	    }
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(3);

	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;

	buf.push("<h1>更新用户资料</h1><form method=\"post\" action=\"/users/updateUser\"><div class=\"form-row\"><label></label><span>ID:</span><v-textfiled type=\"text\" name=\"id\"></v-textfiled></div><div class=\"form-row\"><label></label><span>name:</span><v-textfiled type=\"text\" name=\"name\"></v-textfiled></div><div class=\"form-row\"><label></label><span>age:</span><v-textfiled type=\"text\" name=\"age\"></v-textfiled></div><div class=\"form-row\"><botton type=\"submit\" class=\"btn-primary\">增加用户</botton></div></form>");;return buf.join("");
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */

	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];

	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }

	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }

	  return a;
	};

	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */

	function nulls(val) {
	  return val != null && val !== '';
	}

	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}

	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};


	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};

	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];

	  var keys = Object.keys(obj);

	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];

	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }

	  return buf.join('');
	};

	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */

	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;

	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}

	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};

	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */

	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(4).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);

	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');

	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};

	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 4 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
	* 公共依赖
	*/

	/*
	* 依赖工具类加载
	*/
	//require('../../../../WebFrontShared/Static/assets/utils/loading/loading');

	/*
	* 依赖组件加载
	*/
	//require('../../../../WebFrontShared/Static/assets/component/page/header/header');
	//require('../../../../WebFrontShared/Static/assets/component/page/footer/footer');

	/*
	* 公共样式
	*/
	'use strict';

	__webpack_require__(6);

	/*
	* 自定义filter
	*/
	/*Vue.filter('vdefaultavatar', {
	    read: function(val){
	        return val || '/Static/Images/defaultUser.png';
	    }
	});
	Vue.filter('vdefaultlogo', {
	    read: function(val){
	        return val || '/Static/Images/defaultLogo.jpg';
	    }
	});*/
	/*
	* 全局配置
	*/
	/*$.ajaxSetup({
	    cache: false
	});*/

/***/ },
/* 6 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/*
	* 输入框组件: textfield
	* @params:
	*       val: 输入值
	*       type: 输入框类型，默认为text
	*       width: 输入框宽度，默认为200px
	*       fieldlabel：前置label名
	*       hidelabel: 是否隐藏label，默认为false
	*       labelwidth：输入框对应label名
	*       placeholder: 空白时显示的提示文案
	*       required: 是否必填，默认为false
	*       isempty: 是否为空，默认为false
	*       regex: 正则校验
	*       validated: 校验是否通过，默认为true
	*       rows: 当type为textarea时行高，默认为6行
	*       displaytext: 当type为file时，btn的显示名
	*       filemaxsize: 上传文件的大小（字节）
	*       filetype： 上传文件的类型（ex: '.jpg,.txt'）
	*/
	'use strict';

	__webpack_require__(8);
	__webpack_require__(9);
	var tpl = __webpack_require__(10);

	/*
	* mixin
	*/
	var FormMixin = __webpack_require__(11);

	var TextFiled = Vue.extend({
	    mixins: [FormMixin],
	    props: {
	        'width': null,
	        'val': null,
	        'name': null,
	        'type': null,
	        'displaytext': null,
	        'action': null,
	        'readonly': null,
	        'hidelabel': null,
	        'fieldlabel': null,
	        'labelwidth': null,
	        'placeholder': null,
	        'required': null,
	        'emptytext': null,
	        'validatetext': null,
	        'regex': null,
	        'rows': null,
	        'maxupload': null,
	        'filetype': {
	            type: String,
	            'default': ''
	        },
	        'filemaxsize': {
	            type: Number,
	            'default': 0
	        }
	    },
	    template: tpl(),
	    data: function data() {
	        return {
	            vtype: this.type || 'text',
	            displaytext: this.displaytext || '上传',
	            isshowlabel: !this.hidelabel,
	            labeltext: this.fieldlabel,
	            pholder: this.placeholder,
	            isrequired: this.required || false,
	            maxUploadNum: parseInt(this.maxupload, 10) || 0,
	            currentUploadNum: 0,
	            isempty: false,
	            validated: true,
	            vvalidatetext: this.validatetext || '格式不正确',
	            rows: this.rows || 6,
	            labelstyle: {
	                width: this.transformCssUnit(this.labelwidth || '200px')
	            },
	            bodystyle: {
	                width: this.transformCssUnit(this.width || '60px')
	            }
	        };
	    },
	    methods: {
	        init: function init() {
	            if (this.type === 'file') {
	                var _self = this;
	                this.fileForm = $(this.$el).find('form');
	                this.fileInput = this.fileForm.find('input[type="file"]');
	                this.fileInput.attr('accept', this.filetype);
	                this.fileForm.ajaxForm({
	                    beforeSubmit: function beforeSubmit() {
	                        if (_self.maxUploadNum === 0 && _self.filemaxsize === 0) {
	                            return true;
	                        }
	                        if (_self.checkValueBeforeUpload() === false) {
	                            return false;
	                        }
	                    },
	                    success: function success(rtn) {
	                        try {
	                            rtn = JSON.parse(rtn);
	                        } catch (err) {
	                            rtn = rtn || {};
	                        }
	                        rtn.data = rtn.data || {};
	                        _self.val = rtn.data.url || '';
	                        _self.doValidate();
	                        _self.$dispatch('fileupload', rtn);
	                    }
	                });
	            } else {
	                this.$body = $(this.$el);
	            }
	            this.regex = this.regex && new RegExp(this.regex);
	        },
	        /*
	        * 为空检测
	        */
	        emptyCheck: function emptyCheck() {
	            if (!this.isrequired) {
	                this.isempty = false;
	                return true;
	            }
	            if (this.val) {
	                this.isempty = false;
	            } else {
	                this.isempty = true;
	                this.vvalidatetext = this.emptytext;
	            }
	            return !this.isempty;
	        },
	        /*
	        * 正则检测
	        */
	        validatedCheck: function validatedCheck() {
	            if (!this.regex || !this.val && !this.isrequired) {
	                this.validated = true;
	                return true;
	            }
	            this.validated = this.regex.test(this.val);
	            if (!this.validated) {
	                this.vvalidatetext = this.validatetext;
	            }
	        },
	        doValidate: function doValidate() {
	            this.emptyCheck() && this.validatedCheck();
	            return !this.isempty && this.validated;
	        },
	        setValidate: function setValidate(bool, msg) {
	            this.vvalidatetext = msg || this.vvalidatetext;
	            this.validated = bool;
	        },
	        /*
	        * 添加focus判断，解决IE下placeholder触发input事件bug
	        */
	        doKeyUp: function doKeyUp(e) {
	            if (this.doValidate() && $(e.target).is(':focus')) {
	                this.$dispatch('input', this.val);
	            }
	        },
	        doUpload: function doUpload(e) {
	            if (this.fileInput.val()) {
	                this.fileForm.submit();
	            }
	        },
	        doChange: function doChange(e) {
	            this.$dispatch('change', this.val);
	        },
	        reset: function reset() {
	            this.currentUploadNum = 0;
	            if (this.fileInput) {
	                this.fileInput.val('');
	                this.currentUploadNum = 0;
	            }
	            this.setValue('');
	        },
	        checkValueBeforeUpload: function checkValueBeforeUpload() {
	            if (this.maxUploadNum !== 0 && this.currentUploadNum + 1 > this.maxUploadNum) {
	                shortTips('最多能上传 ' + this.maxUploadNum + ' 个文件！');
	                return false;
	            }
	            if (this.filemaxsize < this.fileInput[0].files[0].size) {
	                shortTips('最大能上传 ' + this.filemaxsize / (1024 * 1024) + 'M 文件！');
	                return false;
	            }
	        }
	    },
	    watch: {
	        'val': function val() {
	            // 兼容IE9-10下v-model bug
	            this.$body && this.$body.find('.form-control').val(this.val);
	            this.$dispatch('valuechange', this.val);
	        }
	    }
	});

	Vue.filter('vtrim', {
	    read: function read(val) {
	        return val;
	    },
	    write: function write(val) {
	        return val.trim();
	    }
	});

	module.exports = Vue.component('v-textfiled', TextFiled);

/***/ },
/* 8 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 9 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(3);

	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;

	buf.push("<div class=\"textfield\"><div v-if=\"isshowlabel\" v-bind:style=\"labelstyle\" class=\"field-label\"><span v-if=\"isrequired\" class=\"required-tip\">*</span>{{ labeltext }}：</div><div v-bind:style=\"bodystyle\" class=\"field-body\"><template v-if=\"vtype === 'file'\"><form method=\"post\" :action=\"action\" enctype=\"multipart/form-data\"><input type=\"hidden\" name=\"purpose\" value=\"1\"><div class=\"tip\">{{ displaytext }}</div><input v-if=\"vtype === 'file'\" type=\"file\" :name=\"name\" :readOnly=\"readonly\" @change=\"doUpload\" placeholder=\"{{ pholder }}\" class=\"btn-file form-control\"></form></template><template v-else><textarea v-if=\"vtype === 'textarea'\" :rows=\"rows\" :name=\"name\" :readOnly=\"readonly\" placeholder=\"{{ pholder }}\" v-model=\"val | vtrim\" @input=\"doKeyUp | debounce 300\" @change=\"doChange\" class=\"form-control\"></textarea><input v-else :type=\"vtype\" :name=\"name\" :readOnly=\"readonly\" placeholder=\"{{ pholder }}\" v-model=\"val | vtrim\" @input=\"doKeyUp | debounce 300\" @change=\"doChange\" class=\"form-control\"></template><span v-if=\"isrequired || regex\" v-show=\"isempty || !validated\" class=\"error-message\">{{ vvalidatetext }}</span></div></div>");;return buf.join("");
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/*
	* mixin - form表单相关
	*/

	'use strict';

	var BaseMixin = __webpack_require__(12);
	var Class = __webpack_require__(13);

	var Form = {
	    methods: {
	        getValue: function getValue() {
	            return this.val === undefined || this.val === 'undefined' || this.val === null ? '' : this.val;
	        },
	        setValue: function setValue(val) {
	            this.val = val === undefined || val === 'undefined' || val === null ? this.val || '' : val;
	        }
	    }
	};

	Class.extend(BaseMixin, Form);

	module.exports = Form;

/***/ },
/* 12 */
/***/ function(module, exports) {

	/*
	* mixin - base表单相关
	*/

	'use strict';

	var Base = {
	    methods: {
	        init: function init() {},
	        transformCssUnit: function transformCssUnit(val) {
	            var type = isNaN(val);
	            val = type ? val : val + 'px';
	            return val;
	        }
	    },
	    ready: function ready() {
	        this.init();
	    }
	};

	module.exports = Base;

/***/ },
/* 13 */
/***/ function(module, exports) {

	/*
	* 基础类 class
	*/
	'use strict';

	var Class = {
	    extend: function extend(_parent, _child) {
	        for (var i in _parent) {
	            if (typeof _parent[i] === 'function') {
	                _child[i] = _parent[i];
	            } else {
	                for (var j in _parent[i]) {
	                    _child[i][j] = _parent[i][j];
	                }
	            }
	        }
	    }
	};

	module.exports = Class;

/***/ }
/******/ ]);