/**
 * gulpfile.js
 */

'use strict';

var gulp = require('gulp');
var bom = require('gulp-bom');
var hash = require('gulp-static-hash');
var cssmin = require('gulp-cssmin');
var uglify = require('gulp-uglify');
// 静态文件打包合并
var config = require('./config');
var webConfig = require('./webpack.config');
var webpack = require('gulp-webpack');
// var rev = require('gulp-rev');
// var revCollector = require('gulp-rev-collector');
var del = require('del');

// // css MD5
// gulp.task('css', function (cb) {
//     gulp.src(config.tmpDir + '/css/*.css')
//         .pipe(rev())
//         .pipe(gulp.dest('./dist/css'))
//         .pipe(rev.manifest())
//         .pipe(gulp.dest(config.tmpDir + '/rev/css'))
//         .on('end', cb);
// });
 
// // js MD5
// gulp.task('js', function (cb) {
//     gulp.src(config.tmpDir + '/js/*.js')
//         .pipe(rev())
//         .pipe(gulp.dest('./dist/js'))
//         .pipe(rev.manifest())
//         .pipe(gulp.dest(config.tmpDir + '/rev/js'))
//         .on('end', cb);
// });

// // 文件替换
// gulp.task('rev', ['css', 'js'], function (cb) {
//     gulp.src([config.tmpDir + '/rev/**/*.json', '../Views/**/*.cshtml'])
//         .pipe(revCollector({
//             dirReplacements: {
//                 '/Static/tmp/css/': '/Static/dist/css/',
//                 '/Static/tmp/js/': '/Static/dist/js/'
//             }
//         }))
//         .pipe(bom())
//         .pipe(gulp.dest(config.publishDir))
//         .on('end', function(){
//             // 清除tmp目录
//             gulp.run('clean-tmp');
//             cb();
//         });
// });

// // 备份view目录
// gulp.task('backup-view', function(cb){
//     gulp.src("../Views/**")
//     .pipe(bom())
//     .pipe(gulp.dest("../ViewsDev/"))
//     .on('end', cb);
// });

// // 还原view目录
// gulp.task('reset-view', function(cb){
//     gulp.src("../ViewsDev/**")
//     .pipe(bom())
//     .pipe(gulp.dest("../Views/"))
//     .on('end', cb);
// });


// 删除dist目录
gulp.task('clean', function(cb) {
    return del(['./dist', config.tmpDir])
});

// 压缩js
gulp.task('uglify', function(cb) {
    gulp.src(config.publicDir + '/js/**')
        .pipe(uglify())
        .pipe(bom())
        .pipe(gulp.dest(config.publicDir + '/js/'))
        .on('end', cb);
});

// 压缩css
gulp.task('cssmin', function(cb) {
    gulp.src(config.publicDir + '/css/*')
        .pipe(cssmin())
        .pipe(bom())
        .pipe(gulp.dest(config.publicDir + '/css/'))
        .on('end', cb);
});

// webpack依赖解析
gulp.task('webpack', ['clean'], function (cb) {
    gulp.src(config.assetDir)
        .pipe(webpack(webConfig))
        .pipe(bom())
        .pipe(gulp.dest(config.distDir))
        .on('end', cb);
});

// html添加hash后缀
gulp.task('hash', ['webpack'], function(cb){
    gulp.src("../Views/**/*.cshtml")
    .pipe(hash({asset: '../'}))
    .pipe(bom())
    .pipe(gulp.dest("../Views/"))
    .on('end', cb);
});

// 监听文件变化
var arr = [];
arr.push(config.assetDir + '/**/*');
arr.push(config.webShareDir + '/**/*');
arr.push(config.webShareDir + '/**/**/*');
arr.push(config.webShareDir + '/**/**/**/*');

// 开发环境不添加hash
gulp.task('default', ['webpack'], function(){
    gulp.watch(arr, ['webpack']);
});

// 发布生产时添加hash
gulp.task('publish', ['hash'], function(){
    gulp.watch(arr, ['hash']);
});