/*
* 下拉选择框组件: combobox
* @params:
*       width: 输入框宽度，默认为200px
*       fieldlabel：前置label名
*       displaytext：下拉框显示时对应的key名，默认为text
*       displayvalue：下拉框value对应的key名，默认为value
*       hidelabel: 是否隐藏label，默认为false
*       labelwidth：输入框对应label名
*       placeholder: 空白时显示的提示文案
*       required: 是否必选，默认为false
*       isremote: 是否从远程api获取数据源store，默认为false（从本地获取）
*       url: api地址
*       validated: 校验是否通过
*       allowedit: 是否允许输入，默认为false
*       expand: 是否展开，默认为false
*       isfilter: 当combox支持edit时是否自动过滤，默认为false
*       selected: 当前下来框中选中的item，默认不选中
*       isselectall: 远程获取数据时，是否自动添加“选择所有”选项，默认为true
*       selectalltext: 远程获取数据时，“选择所有”对应文本，默认为"选择所有"
*       selectallvalue: 远程获取数据时，“选择所有”对应值，默认为"选择所有"
*       isReset: 当数据源更新时，是否重置（初始化），默认为true
*       beforerowrender: 渲染行前执行的cb
*       beforesettext: setText前的cb，与beforerowrender一起使用，还原text
*       afterload: 数据加载完毕后的cb
*/

require('./combobox.scss');
var tpl = require('./combobox.jade');

/*
* 工具类依赖
*/
var parse = require('../../../utils/parse');

/*
* mixin
*/
var FormMixin = require('../../mixin/form');

var Combobox = Vue.extend({
    mixins: [FormMixin],
    props: ['val', 'name', 'width', 'store', 'isremote', 'url', 'hidelabel', 'fieldlabel', 'labelwidth', 'required', 'emptytext', 'allowedit', 'isfilter', 'isselectall', 'selectalltext', 'selectallvalue', 'displayvalue', 'displaytext', 'beforerowrender', 'beforesettext', 'afterload'],
    template: tpl(),
    data: function () {
        return {
            store: this.store || [],
            expand: false,
            isshowlabel: !this.hidelabel,
            labeltext: this.fieldlabel,
            isrequired: this.required || false,
            validated: true,
            isreadonly: this.allowedit || false,
            labelstyle: {
                width: this.transformCssUnit(this.labelwidth || '200px')
            },
            bodystyle: {
                width: this.transformCssUnit(this.width || '60px')
            },
            inputText: '',
            vdisplayvalue: this.displayvalue || 'value',
            vdisplaytext: this.displaytext || 'text',
            isReset: true,
            selected: '',
            visselectall: this.isselectall === undefined ? true : this.isselectall,
            vselectalltext: this.selectalltext || '选择所有'
        }
    },
    methods: {
        init: function () {
            this.$body = $(this.$el);
            this.$items = this.$body.find('ul li');
            this.$input = this.$body.find('input');
            this.beforeRowRender = this.beforerowrender || function (data) { return data };
            this.beforeSetText = this.beforesettext || function (text) { return text };
            this.selectallvalue = this.selectallvalue === undefined ? '' : this.selectallvalue;
            this.val = this.val === undefined ? this.selectallvalue : this.val;
            this.loadData();
            this.getOriginStore();            
            this.setText();
        },
        /*
        * input click事件
        */
        doClick: function () {
            this.$input.focus();
            this.expand = !this.expand;
        },
        /*
        * input 失去焦点
        */
        doBlur: function () {
            this.packUp();
            if (this.getValue() === '') {
                this.setText();
            }
        },
        /*
        * 选中事件
        *   @val 选中的值
        */
        doSelect: function (val, index) {
            this.isReset = true;
            this.setSelectedItem(val);
            this.doChange();
            this.selected = index;
        },
        /*
        * 选中后emit事件
        */
        doChange: function () {
            this.doValidate();
            this.$emit('change', this.val);
        },
        /*
        * 回车enter按键触发的事件
        */
        doKeyEnter: function () {
            this.select();
        },
        /*
        * 向上up按键触发的事件
        */
        doKeyUp: function () {
            this.selectPre();
        },
        /*
        * 向下down按键触发的事件
        */
        doKeyDown: function () {
            this.dropDown();
            this.selectNext();
        },
        /*
        * 输入框过滤
        */
        doSearch: function () {
            if (this.isfilter) {
                var arr = [];
                for (var i = 0, items = this.originStore, len = items.length; i < len; i++) {
                    if (items[i][this.vdisplaytext].toLowerCase().trim().indexOf(this.inputText.toLowerCase().trim()) !== -1) {
                        arr.push(items[i]);
                    }
                }
                this.store = arr;
                this.selected = '';
                this.dropDown();
                this.isReset = false;
            }
        },
        /*
        * 验证输入类容
        */
        doValidate: function () {
            if (!this.isrequired) {
                return true;
            }
            if (this.val) {
                this.validated = true;
            } else {
                this.validated = false;
            }
            return this.validated;
        },
        /*
        * 获取当前选中item的record值
        */
        getSelectedRecord: function () {
            var val = this.getValue(), store = this.originStore;
            for (var i = 0, len = store.length; i < len; i++) {
                if (val == store[i][this.vdisplayvalue]) {
                    return store[i];
                }
            }
            return {};
        },
        /*
        * 选中当前行
        */
        select: function () {
            var $el = this.$body.find('li.selected');
            if($el.length === 0){
                return;
            }
            var event = document.createEvent("HTMLEvents");
            event.initEvent("mousedown", true, false);
            $el[0].dispatchEvent(event);
            this.doBlur();
        },
        /*
        * 选中上一项
        */
        selectPre: function () {
            if (this.selected === '' || this.selected === 0) {
                this.selected = this.store.length - 1;
            } else {
                this.selected--;
            }
        },
        /*
        * 选中下一项
        */
        selectNext: function () {
            if (this.selected === '' || this.selected === this.store.length - 1) {
                this.selected = 0;
            } else {
                this.selected++;
            }
        },
        /*
        * 展开下拉列表
        */
        dropDown: function () {
            this.expand = true;
        },
        /*
        * 收起下来列表
        */
        packUp: function () {
            this.expand = false;
        },
        /*
        * 选中当前元素
        */
        setSelectedItem: function (val) {
            this.setValue(val);
            this.setText();
        },
        /*
        * 设置input显示text
        */
        setText: function () {
            this.$items.removeClass('selected');
            for (var i = 0, store = this.originStore, len = store.length; i < len; i++) {
                if (this.val.toString() === store[i][this.vdisplayvalue].toString()) {
                    this.$items.eq(i).addClass('selected');
                    var text = this.beforeSetText(store[i][this.vdisplaytext]);
                    this.inputText = text;
                    // 兼容IE9-10下v-model bug
                    return this.$body.find('input').val(text);
                }
            }
            this.inputText = this.selectalltext || '';
        },
        /*
        * 保留原始数据源，过滤时还原
        */
        getOriginStore: function () {
            this.originStore = this.store.concat([]);
        },
        getStoreLocal: function () {
            this.store = this.store || '';
            if (this.store instanceof Array) {
                return this.store;
            }
            var item, rec, arr = [], items = this.store.split('|');
            for (var i = 0, len = items.length; i < len; i++) {
                item = items[i];
                rec = item.split(',');
                arr.push({
                    value: rec[0],
                    text: rec[1]
                });
            }
            return arr;
        },
        getStoreAsync: function () {
            var _self = this;
            $.get(this.url, function (rtn) {
                if (!rtn.succeeded) {
                    return parse.showError(rtn);
                }
                if (_self.visselectall) {
                    rtn.data.unshift({
                        value: _self.selectallvalue,
                        text: _self.vselectalltext
                    });
                }
                var data = rtn.data;
                _self.beforeRowRender(data);
                _self.store = data;
                Vue.nextTick(function () {
                    _self.afterload && _self.afterload(rtn.data);
                })
            });
        },
        /*
        * 暴露统一API
        */
        load: function () {
            this.loadData();
        },
        loadData: function () {
            if (this.isremote) {
                return this.getStoreAsync();
            } else {
                return this.getStoreLocal();
            }
        },
        /*
        * 数据源更新时reset
        */
        reset: function () {
            this.getOriginStore();
            this.setSelectedItem();
        }
    },
    watch: {
        'store': function (val) {
            this.isReset && this.reset();
        }
    }
});

module.exports = Vue.component('vcombobox', Combobox);