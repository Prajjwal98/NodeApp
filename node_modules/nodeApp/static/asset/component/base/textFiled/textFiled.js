/*
* 输入框组件: textfield
* @params:
*       val: 输入值
*       type: 输入框类型，默认为text
*       width: 输入框宽度，默认为200px
*       fieldlabel：前置label名
*       hidelabel: 是否隐藏label，默认为false
*       labelwidth：输入框对应label名
*       placeholder: 空白时显示的提示文案
*       required: 是否必填，默认为false
*       isempty: 是否为空，默认为false
*       regex: 正则校验
*       validated: 校验是否通过，默认为true
*       rows: 当type为textarea时行高，默认为6行
*       displaytext: 当type为file时，btn的显示名
*       filemaxsize: 上传文件的大小（字节）
*       filetype： 上传文件的类型（ex: '.jpg,.txt'）
*/
require('asset/etc/sass/config.scss');
require('./textFiled.scss');
var tpl = require('./textFiled.jade');

/*
* mixin
*/
var FormMixin = require('../../mixin/form');

var TextFiled = Vue.extend({
    mixins: [FormMixin],
    props: {
        'width': null,
        'val': null,
        'name': null,
        'type': null,
        'displaytext': null,
        'action': null,
        'readonly': null,
        'hidelabel': null,
        'fieldlabel': null,
        'labelwidth': null,
        'placeholder': null,
        'required': null,
        'emptytext': null,
        'validatetext': null,
        'regex': null,
        'rows': null,
        'maxupload': null,
        'filetype': {
            type: String,
            default: ''
        },
        'filemaxsize': {
            type: Number,
            default: 0
        }
    },
    template: tpl(),
    data: function(){
        return {
            vtype: this.type || 'text',
            displaytext: this.displaytext || '上传',
            isshowlabel: !this.hidelabel,
            labeltext: this.fieldlabel,
            pholder:  this.placeholder,
            isrequired: this.required || false,
            maxUploadNum: parseInt(this.maxupload, 10) || 0,
            currentUploadNum: 0,
            isempty: false,
            validated: true,
            vvalidatetext: this.validatetext || '格式不正确',
            rows: this.rows || 6,
            labelstyle: {
                width: this.transformCssUnit(this.labelwidth || '200px')
            },
            bodystyle: {
                width:  this.transformCssUnit(this.width || '60px')
            }
        }
    },
    methods: {
        init: function () {
            if(this.type === 'file'){
                var _self = this;
                this.fileForm = $(this.$el).find('form');
                this.fileInput = this.fileForm.find('input[type="file"]');
                this.fileInput.attr('accept', this.filetype);
                this.fileForm.ajaxForm({
                    beforeSubmit: function () {
                        if (_self.maxUploadNum === 0 && _self.filemaxsize === 0) {
                            return true;
                        }
                        if (_self.checkValueBeforeUpload() === false) {
                            return false;
                        }                        
                    },
                    success: function (rtn) {
                        try {
                            rtn = JSON.parse(rtn);
                        }catch(err){
                            rtn = rtn || {};
                        }
                        rtn.data = rtn.data || {};
                        _self.val = rtn.data.url || '';
                        _self.doValidate();
                        _self.$dispatch('fileupload', rtn);
                    }
                });
            }else {
                this.$body = $(this.$el);
            }
            this.regex = this.regex && new RegExp(this.regex);
        },
        /*
        * 为空检测
        */
        emptyCheck: function(){
            if(!this.isrequired){
                this.isempty = false;
                return true;
            }
            if(this.val){
                this.isempty = false;
            }else{
                this.isempty = true;
                this.vvalidatetext = this.emptytext;
            }
            return !this.isempty;
        },
        /*
        * 正则检测
        */
        validatedCheck: function(){
            if(!this.regex || (!this.val && !this.isrequired)){
                this.validated = true;
                return true;
            }
            this.validated = this.regex.test(this.val);
            if(!this.validated){
                this.vvalidatetext = this.validatetext;
            }
        },
        doValidate: function () {
            this.emptyCheck() && this.validatedCheck();
            return !this.isempty && this.validated;
        },
        setValidate: function(bool, msg){
            this.vvalidatetext = msg || this.vvalidatetext;
            this.validated = bool;
        },
        /*
        * 添加focus判断，解决IE下placeholder触发input事件bug
        */
        doKeyUp: function(e){
            if(this.doValidate() && $(e.target).is(':focus')){
                this.$dispatch('input', this.val);
            }
        },
        doUpload: function(e){
            if(this.fileInput.val()){
                this.fileForm.submit();
            }
        },
        doChange: function(e){
            this.$dispatch('change', this.val);
        },
        reset: function () {
            this.currentUploadNum = 0;
            if (this.fileInput) {
                this.fileInput.val('');
                this.currentUploadNum = 0;
            }
            this.setValue('');
        },
        checkValueBeforeUpload: function () {
            if (this.maxUploadNum !== 0 && this.currentUploadNum + 1 > this.maxUploadNum) {
                shortTips('最多能上传 ' + this.maxUploadNum + ' 个文件！');
                return false;
            }
            if (this.filemaxsize < this.fileInput[0].files[0].size) {
                shortTips('最大能上传 ' + this.filemaxsize / (1024 * 1024) + 'M 文件！');
                return false;
            }
        }
    },
    watch: {
        'val': function(){
            // 兼容IE9-10下v-model bug
            this.$body && this.$body.find('.form-control').val(this.val);
            this.$dispatch('valuechange', this.val);
        }
    }
});

Vue.filter('vtrim', {
    read: function(val){
        return val;
    },
    write: function(val){
        return val.trim();
    }
});

module.exports = Vue.component('v-textfiled', TextFiled);