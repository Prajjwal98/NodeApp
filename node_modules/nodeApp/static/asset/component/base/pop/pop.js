/*
* 弹窗组件: pop
* @params:
*   poptype: 'alert' || 'confirm',default is 'alert'
*   cbstatus: if trigger component whose callback of 'ok' and 'no'  
*/

require('./pop.scss');
var tpl = require('./pop.jade');

var Pop = Vue.extend({
    props: {
        poptype: {
            type: String,
            default: 'alert'
        },
        headername: {
            type: String,
            default: '提示'
        },
        okbtnname: {
            type: String,
            default: '确定'
        },
        nobtnname: {
            type: String,
            default: '取消'
        },
        okcb: {
            validator: function (value) {
                return value instanceof Function;
            },
            default: function () {
                return function () {
                    this.hide();
                }
            }
        },
        nocb: {
            validator: function (value) {
                return value instanceof Function;
            },
            default: function () {
                return function () {
                    this.hide();
                }
            }
        }
    },
    template: tpl(),
    data: function () {
        return {
            pointStart: {
                x: 0,
                y: 0
            },
            isMousedown: false
        }
    },
    methods: {
        show: function () {
            $(this.$el).show();
        },
        hide: function () {
            $(this.$el).hide();
        },
        mouseDown: function (event) {
            this.isMousedown = true;
            this.pointStart = {
                x: event.clientX,
                y: event.clientY
            };
        },
        mouseMove: function (event) {
            var $this = $(this.$el);
            if (!this.isMousedown) {
                return false;
            }
            var top = parseInt($this.css('top'), 10),
                left = parseInt($this.css('left'), 10);
            $this.css({
                'top': top + event.clientY - this.pointStart.y,
                'left': left + event.clientX - this.pointStart.x
            });
            this.pointStart = {
                x: event.clientX,
                y: event.clientY
            };
        },
        mouseUp: function () {
            if (!this.isMousedown) {
                return false;
            }
            this.isMousedown = false;
        },
        ok: function () {
            this.$dispatch('ok');
            this.okcb && this.okcb();
        },
        cancel: function () {
            this.$dispatch('cancel');
            this.nocb && this.nocb();
        }
    }
});

module.exports = Vue.component('vpop', Pop);